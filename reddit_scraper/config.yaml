# Reddit Finance Scraper Configuration

# List of subreddits to scrape
# Note: Banking and CryptoCurrency were added to expand coverage beyond the original 7 finance subreddits
subreddits:
  - wallstreetbets
  - stocks
  - investing
  - StockMarket
  - options
  - finance
  - UKInvesting
  - Banking          # Added for broader banking/finance coverage
  - CryptoCurrency   # Added for crypto finance discussions

# Historic search window in days
window_days: 30

# Path to CSV storage file
# Docker: /app/data/reddit_finance.csv (mounted volume)
# Local: data/reddit_finance.csv (relative to project root)
# Note: Single consolidated file (not per-subreddit/per-date as originally designed)
csv_path: /app/data/reddit_finance.csv

# Whether to perform initial backfill on startup
initial_backfill: true

# Number of consecutive 5xx errors before aborting
failure_threshold: 5

# Interval in seconds between maintenance runs
maintenance_interval_sec: 61

# Minimum time gap in seconds to trigger auto-backfill (10 minutes)
auto_backfill_gap_threshold_sec: 600

# Rate limiting settings
rate_limit:
  # Maximum requests per minute
  max_requests_per_minute: 100
  # Minimum remaining calls before sleeping
  min_remaining_calls: 5
  # Additional seconds to add to reset time
  sleep_buffer_sec: 2

# Monitoring settings
monitoring:
  # Enable Prometheus metrics
  enable_prometheus: true
  # Port for Prometheus metrics server
  prometheus_port: 8000
  # Alert thresholds
  alerts:
    # Maximum age of latest fetch in seconds (20 minutes)
    max_fetch_age_sec: 1200
    # Maximum disk usage percentage for CSV
    max_disk_usage_percent: 90

# PostgreSQL settings
# Primary storage backend - writes to TimescaleDB raw_events hypertable
postgres:
  # Enable PostgreSQL storage (primary storage backend)
  enabled: true
  # PostgreSQL connection settings (can be overridden by environment variables)
  # These settings work with the shared TimescaleDB instance used by sentiment_analyzer
  host: timescaledb
  port: 5432
  dbname: sentiment_pipeline_db
  user: test_user
  password: ${PG_PASSWORD}  # Use environment variable instead of hardcoded password
  # SQLAlchemy settings - uses SQLAlchemyPostgresSink for robust database operations
  use_sqlalchemy: true
